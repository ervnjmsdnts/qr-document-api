generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CHECKER
  CLERK
}

enum Department {
  MPDC
  MO
  HRMO
  BO
  AIASO
  MTO
  GSO
  BAC
  MBO
}

model User {
  id                    String                  @id @unique @default(uuid())
  name                  String
  username              String                  @unique
  picture               String?
  password              String
  department            Department
  contactNumber         String
  role                  UserRole
  isActive              Boolean                 @default(true)
  RequestPasswordChange RequestPasswordChange[]
  createdAt             DateTime                @default(now())
  document              Document[]
}

enum RequestPasswordChangeStatus {
  PENDING
  APPROVED
  REJECTED
}

model RequestPasswordChange {
  id          String                      @id @unique @default(uuid())
  user        User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  newPassword String
  userId      String
  status      RequestPasswordChangeStatus @default(PENDING)
  createdAt   DateTime                    @default(now())
}

enum DocumentStatus {
  PENDING
  CHECKING
  SIGNED
}

enum DocumentType {
  MEMORANDUM
  PURCHASE_REQUEST
  VOUCHER_BILLING
  PAYROLL
}

model Document {
  id                 String         @id @unique @default(uuid())
  qrCode             String?
  image              String?
  title              String
  amount             Float
  status             DocumentStatus @default(PENDING)
  user               User           @relation(fields: [userId], references: [id])
  type               DocumentType
  nextDepartment     Department
  checkedDepartments Department[]
  isCancelled        Boolean        @default(false)
  isArchived         Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  userId             String
  notification       Notification[]
}

model Notification {
  id         String   @id @unique @default(uuid())
  content    String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  documentId String
}
